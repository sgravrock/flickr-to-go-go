// This file was generated by counterfeiter
package authfakes

import (
	"net/http"
	"sync"

	"github.com/sgravrock/flickr-to-go-go/auth"
)

type FakeAuthenticator struct {
	AuthenticateStub        func(savecreds bool) (*http.Client, error)
	authenticateMutex       sync.RWMutex
	authenticateArgsForCall []struct {
		savecreds bool
	}
	authenticateReturns struct {
		result1 *http.Client
		result2 error
	}
}

func (fake *FakeAuthenticator) Authenticate(savecreds bool) (*http.Client, error) {
	fake.authenticateMutex.Lock()
	fake.authenticateArgsForCall = append(fake.authenticateArgsForCall, struct {
		savecreds bool
	}{savecreds})
	fake.authenticateMutex.Unlock()
	if fake.AuthenticateStub != nil {
		return fake.AuthenticateStub(savecreds)
	} else {
		return fake.authenticateReturns.result1, fake.authenticateReturns.result2
	}
}

func (fake *FakeAuthenticator) AuthenticateCallCount() int {
	fake.authenticateMutex.RLock()
	defer fake.authenticateMutex.RUnlock()
	return len(fake.authenticateArgsForCall)
}

func (fake *FakeAuthenticator) AuthenticateArgsForCall(i int) bool {
	fake.authenticateMutex.RLock()
	defer fake.authenticateMutex.RUnlock()
	return fake.authenticateArgsForCall[i].savecreds
}

func (fake *FakeAuthenticator) AuthenticateReturns(result1 *http.Client, result2 error) {
	fake.AuthenticateStub = nil
	fake.authenticateReturns = struct {
		result1 *http.Client
		result2 error
	}{result1, result2}
}

var _ auth.Authenticator = new(FakeAuthenticator)

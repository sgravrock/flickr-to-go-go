// This file was generated by counterfeiter
package storagefakes

import (
	"sync"

	"github.com/sgravrock/flickr-to-go-go/storage"
)

type FakeStorage struct {
	EnsureRootStub        func() error
	ensureRootMutex       sync.RWMutex
	ensureRootArgsForCall []struct{}
	ensureRootReturns     struct {
		result1 error
	}
	CreateStub        func(name string) (storage.File, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		name string
	}
	createReturns struct {
		result1 storage.File
		result2 error
	}
	OpenStub        func(name string) (storage.File, error)
	openMutex       sync.RWMutex
	openArgsForCall []struct {
		name string
	}
	openReturns struct {
		result1 storage.File
		result2 error
	}
}

func (fake *FakeStorage) EnsureRoot() error {
	fake.ensureRootMutex.Lock()
	fake.ensureRootArgsForCall = append(fake.ensureRootArgsForCall, struct{}{})
	fake.ensureRootMutex.Unlock()
	if fake.EnsureRootStub != nil {
		return fake.EnsureRootStub()
	} else {
		return fake.ensureRootReturns.result1
	}
}

func (fake *FakeStorage) EnsureRootCallCount() int {
	fake.ensureRootMutex.RLock()
	defer fake.ensureRootMutex.RUnlock()
	return len(fake.ensureRootArgsForCall)
}

func (fake *FakeStorage) EnsureRootReturns(result1 error) {
	fake.EnsureRootStub = nil
	fake.ensureRootReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) Create(name string) (storage.File, error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		name string
	}{name})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(name)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *FakeStorage) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeStorage) CreateArgsForCall(i int) string {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].name
}

func (fake *FakeStorage) CreateReturns(result1 storage.File, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 storage.File
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) Open(name string) (storage.File, error) {
	fake.openMutex.Lock()
	fake.openArgsForCall = append(fake.openArgsForCall, struct {
		name string
	}{name})
	fake.openMutex.Unlock()
	if fake.OpenStub != nil {
		return fake.OpenStub(name)
	} else {
		return fake.openReturns.result1, fake.openReturns.result2
	}
}

func (fake *FakeStorage) OpenCallCount() int {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return len(fake.openArgsForCall)
}

func (fake *FakeStorage) OpenArgsForCall(i int) string {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return fake.openArgsForCall[i].name
}

func (fake *FakeStorage) OpenReturns(result1 storage.File, result2 error) {
	fake.OpenStub = nil
	fake.openReturns = struct {
		result1 storage.File
		result2 error
	}{result1, result2}
}

var _ storage.Storage = new(FakeStorage)

// Code generated by counterfeiter. DO NOT EDIT.
package storagefakes

import (
	"sync"

	"github.com/sgravrock/flickr-to-go-go/storage"
)

type FakeStorage struct {
	EnsureRootStub        func() error
	ensureRootMutex       sync.RWMutex
	ensureRootArgsForCall []struct{}
	ensureRootReturns     struct {
		result1 error
	}
	ensureRootReturnsOnCall map[int]struct {
		result1 error
	}
	ExistsStub        func(string) bool
	existsMutex       sync.RWMutex
	existsArgsForCall []struct {
		arg1 string
	}
	existsReturns struct {
		result1 bool
	}
	existsReturnsOnCall map[int]struct {
		result1 bool
	}
	ListFilesStub        func(dir string) ([]string, error)
	listFilesMutex       sync.RWMutex
	listFilesArgsForCall []struct {
		dir string
	}
	listFilesReturns struct {
		result1 []string
		result2 error
	}
	listFilesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	CreateStub        func(name string) (storage.File, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		name string
	}
	createReturns struct {
		result1 storage.File
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 storage.File
		result2 error
	}
	OpenStub        func(name string) (storage.File, error)
	openMutex       sync.RWMutex
	openArgsForCall []struct {
		name string
	}
	openReturns struct {
		result1 storage.File
		result2 error
	}
	openReturnsOnCall map[int]struct {
		result1 storage.File
		result2 error
	}
	MoveStub        func(oldPath string, newPath string) error
	moveMutex       sync.RWMutex
	moveArgsForCall []struct {
		oldPath string
		newPath string
	}
	moveReturns struct {
		result1 error
	}
	moveReturnsOnCall map[int]struct {
		result1 error
	}
	WriteJsonStub        func(name string, payload interface{}) error
	writeJsonMutex       sync.RWMutex
	writeJsonArgsForCall []struct {
		name    string
		payload interface{}
	}
	writeJsonReturns struct {
		result1 error
	}
	writeJsonReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStorage) EnsureRoot() error {
	fake.ensureRootMutex.Lock()
	ret, specificReturn := fake.ensureRootReturnsOnCall[len(fake.ensureRootArgsForCall)]
	fake.ensureRootArgsForCall = append(fake.ensureRootArgsForCall, struct{}{})
	fake.recordInvocation("EnsureRoot", []interface{}{})
	fake.ensureRootMutex.Unlock()
	if fake.EnsureRootStub != nil {
		return fake.EnsureRootStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.ensureRootReturns.result1
}

func (fake *FakeStorage) EnsureRootCallCount() int {
	fake.ensureRootMutex.RLock()
	defer fake.ensureRootMutex.RUnlock()
	return len(fake.ensureRootArgsForCall)
}

func (fake *FakeStorage) EnsureRootReturns(result1 error) {
	fake.EnsureRootStub = nil
	fake.ensureRootReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) EnsureRootReturnsOnCall(i int, result1 error) {
	fake.EnsureRootStub = nil
	if fake.ensureRootReturnsOnCall == nil {
		fake.ensureRootReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.ensureRootReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) Exists(arg1 string) bool {
	fake.existsMutex.Lock()
	ret, specificReturn := fake.existsReturnsOnCall[len(fake.existsArgsForCall)]
	fake.existsArgsForCall = append(fake.existsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Exists", []interface{}{arg1})
	fake.existsMutex.Unlock()
	if fake.ExistsStub != nil {
		return fake.ExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.existsReturns.result1
}

func (fake *FakeStorage) ExistsCallCount() int {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	return len(fake.existsArgsForCall)
}

func (fake *FakeStorage) ExistsArgsForCall(i int) string {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	return fake.existsArgsForCall[i].arg1
}

func (fake *FakeStorage) ExistsReturns(result1 bool) {
	fake.ExistsStub = nil
	fake.existsReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeStorage) ExistsReturnsOnCall(i int, result1 bool) {
	fake.ExistsStub = nil
	if fake.existsReturnsOnCall == nil {
		fake.existsReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.existsReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeStorage) ListFiles(dir string) ([]string, error) {
	fake.listFilesMutex.Lock()
	ret, specificReturn := fake.listFilesReturnsOnCall[len(fake.listFilesArgsForCall)]
	fake.listFilesArgsForCall = append(fake.listFilesArgsForCall, struct {
		dir string
	}{dir})
	fake.recordInvocation("ListFiles", []interface{}{dir})
	fake.listFilesMutex.Unlock()
	if fake.ListFilesStub != nil {
		return fake.ListFilesStub(dir)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listFilesReturns.result1, fake.listFilesReturns.result2
}

func (fake *FakeStorage) ListFilesCallCount() int {
	fake.listFilesMutex.RLock()
	defer fake.listFilesMutex.RUnlock()
	return len(fake.listFilesArgsForCall)
}

func (fake *FakeStorage) ListFilesArgsForCall(i int) string {
	fake.listFilesMutex.RLock()
	defer fake.listFilesMutex.RUnlock()
	return fake.listFilesArgsForCall[i].dir
}

func (fake *FakeStorage) ListFilesReturns(result1 []string, result2 error) {
	fake.ListFilesStub = nil
	fake.listFilesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) ListFilesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.ListFilesStub = nil
	if fake.listFilesReturnsOnCall == nil {
		fake.listFilesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.listFilesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) Create(name string) (storage.File, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("Create", []interface{}{name})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(name)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createReturns.result1, fake.createReturns.result2
}

func (fake *FakeStorage) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeStorage) CreateArgsForCall(i int) string {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].name
}

func (fake *FakeStorage) CreateReturns(result1 storage.File, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 storage.File
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) CreateReturnsOnCall(i int, result1 storage.File, result2 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 storage.File
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 storage.File
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) Open(name string) (storage.File, error) {
	fake.openMutex.Lock()
	ret, specificReturn := fake.openReturnsOnCall[len(fake.openArgsForCall)]
	fake.openArgsForCall = append(fake.openArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("Open", []interface{}{name})
	fake.openMutex.Unlock()
	if fake.OpenStub != nil {
		return fake.OpenStub(name)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.openReturns.result1, fake.openReturns.result2
}

func (fake *FakeStorage) OpenCallCount() int {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return len(fake.openArgsForCall)
}

func (fake *FakeStorage) OpenArgsForCall(i int) string {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return fake.openArgsForCall[i].name
}

func (fake *FakeStorage) OpenReturns(result1 storage.File, result2 error) {
	fake.OpenStub = nil
	fake.openReturns = struct {
		result1 storage.File
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) OpenReturnsOnCall(i int, result1 storage.File, result2 error) {
	fake.OpenStub = nil
	if fake.openReturnsOnCall == nil {
		fake.openReturnsOnCall = make(map[int]struct {
			result1 storage.File
			result2 error
		})
	}
	fake.openReturnsOnCall[i] = struct {
		result1 storage.File
		result2 error
	}{result1, result2}
}

func (fake *FakeStorage) Move(oldPath string, newPath string) error {
	fake.moveMutex.Lock()
	ret, specificReturn := fake.moveReturnsOnCall[len(fake.moveArgsForCall)]
	fake.moveArgsForCall = append(fake.moveArgsForCall, struct {
		oldPath string
		newPath string
	}{oldPath, newPath})
	fake.recordInvocation("Move", []interface{}{oldPath, newPath})
	fake.moveMutex.Unlock()
	if fake.MoveStub != nil {
		return fake.MoveStub(oldPath, newPath)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.moveReturns.result1
}

func (fake *FakeStorage) MoveCallCount() int {
	fake.moveMutex.RLock()
	defer fake.moveMutex.RUnlock()
	return len(fake.moveArgsForCall)
}

func (fake *FakeStorage) MoveArgsForCall(i int) (string, string) {
	fake.moveMutex.RLock()
	defer fake.moveMutex.RUnlock()
	return fake.moveArgsForCall[i].oldPath, fake.moveArgsForCall[i].newPath
}

func (fake *FakeStorage) MoveReturns(result1 error) {
	fake.MoveStub = nil
	fake.moveReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) MoveReturnsOnCall(i int, result1 error) {
	fake.MoveStub = nil
	if fake.moveReturnsOnCall == nil {
		fake.moveReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.moveReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) WriteJson(name string, payload interface{}) error {
	fake.writeJsonMutex.Lock()
	ret, specificReturn := fake.writeJsonReturnsOnCall[len(fake.writeJsonArgsForCall)]
	fake.writeJsonArgsForCall = append(fake.writeJsonArgsForCall, struct {
		name    string
		payload interface{}
	}{name, payload})
	fake.recordInvocation("WriteJson", []interface{}{name, payload})
	fake.writeJsonMutex.Unlock()
	if fake.WriteJsonStub != nil {
		return fake.WriteJsonStub(name, payload)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.writeJsonReturns.result1
}

func (fake *FakeStorage) WriteJsonCallCount() int {
	fake.writeJsonMutex.RLock()
	defer fake.writeJsonMutex.RUnlock()
	return len(fake.writeJsonArgsForCall)
}

func (fake *FakeStorage) WriteJsonArgsForCall(i int) (string, interface{}) {
	fake.writeJsonMutex.RLock()
	defer fake.writeJsonMutex.RUnlock()
	return fake.writeJsonArgsForCall[i].name, fake.writeJsonArgsForCall[i].payload
}

func (fake *FakeStorage) WriteJsonReturns(result1 error) {
	fake.WriteJsonStub = nil
	fake.writeJsonReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) WriteJsonReturnsOnCall(i int, result1 error) {
	fake.WriteJsonStub = nil
	if fake.writeJsonReturnsOnCall == nil {
		fake.writeJsonReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeJsonReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.ensureRootMutex.RLock()
	defer fake.ensureRootMutex.RUnlock()
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	fake.listFilesMutex.RLock()
	defer fake.listFilesMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	fake.moveMutex.RLock()
	defer fake.moveMutex.RUnlock()
	fake.writeJsonMutex.RLock()
	defer fake.writeJsonMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStorage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.Storage = new(FakeStorage)
